根据期望的线性可叠加的性质，我们可以分别计算每一个点得贡献，也就是先枚举一个点r，计算有多少个permutation使得r可以被选中。

枚举完r后，那么唯一会影响到r得只有r的相邻点，如果r的某个相邻点x，permutation中的位置在r之后，那么他不会对r有什么影响，关键在于如果在r之前，如果x成为了独立集中的点，那么r自然就不行了，否则，还要看x得孩子中的选取情况。

就这样，成了一个树上的DP

我们用f[x][i][j]代表x这个子树中，x在permutation中排名第i（相对于子树内的点来说），j为0表示他的位置在父亲之前，并且没有成为独立集中的点，j为1表示他的位置在父亲之前，并且成为了独立集中的点，j为2代表他本身就在父亲之后。这样转移以O（n）的复杂度即可。

这样一来的复杂度是O（n^4）,考虑怎么优化。

可以发现我们求出以r的dp数组后，再求r的相邻点的总的答案的事后，很多点得dp值其实都不用算的。只要充分用之前做的DP值，我们可以在O（n^3）得出答案。